name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  install:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: cargo-registry-cache

    - name: Install dependencies
      run: |
        # downloads dependencies without creating compiling
        cargo fetch 

  build:

    runs-on: ubuntu-latest
    needs: install

    steps:

    - uses: actions/checkout@v4
    - uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: cargo-build-cache
        restore-keys: |
          cargo-build-cache

    - name: Build
      run: cargo build --release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: target/release/

  deploy:

    runs-on: ubuntu-latest
    needs: build

    steps:

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build
        path: target/release/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # - name: Deploy to AWS Lambda
    #   run: |
    #     aws lambda update-function-code --function-name <your-lambda-function-name> --zip-file fileb://target/release/<your-lambda-binary>.zip

